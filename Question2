26. Remove Duplicates from Sorted Array

#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

vector<int> happ(vector<int>&a,int &n)
{
    int c =0;
    for(int i =0 ;i<=n;i++)
    {
        if(a[i]==a[i+1])
        {
            c+=1;
            if(c>=2)
            {
                a.erase(a.begin()+i);
            }
        }
        else{
        c=0;}
    }
    return a;
}
int main()
{
   std::vector<int> v = {1,1,1,3,5,5,9};
  // std::vector<int> p = {2,4,5};
   int n = v.size();
 //  int q = p.size();
happ(v,n);
   int i =0;
   while(i<v.size())
   {
    std::cout << v[i++] << std::endl;   
   }
   
   

    return 0;
}

🔁 What Happens During Erase
Each erase() call shifts the remaining elements:

First erase: remove a[2], shift 1 element → O(1)
Second erase: remove a[2] again (after shifting), shift 0 elements → O(1)
Total operations: 2 erase calls, each costing O(n) in general, but here it's small.

✅ Actual Cost for 4 Elements
Worst-case time complexity: still O(n²) in theory
Actual cost: very small, just a few shifts — practically O(1) for small n
📌 Summary
Vector                    Size	Erase                        Count	Total Cost
4	                           2	                                    O(1)
n (large)                   	~n/2	                                O(n²)
